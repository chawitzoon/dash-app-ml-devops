# Trigger the pipeline on every push to the main branch
trigger:
- main

# Define the pool of agents to use
pool:
  vmImage: 'ubuntu-latest'

variables:
  # Web app name
  webAppName: 'chawitc-dash-app-ml-devops'

  # Environment name
  environmentName: 'prd'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  # Python version: 3.8
  pythonVersion: '3.8'

  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'tbd'

# Define stages in the pipeline
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        make install
      workingDirectory: $(projectRoot)
      displayName: 'Install dependencies'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        make lint
      workingDirectory: $(projectRoot)
      displayName: 'Run lint tests'

- stage: Test
  dependsOn: Build
  jobs:
  - job: TestJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        make install
        make test
      workingDirectory: $(projectRoot)
      displayName: 'Run tests'
    
- stage: Archive
  dependsOn: Test
  jobs:
  - job: ArchiveJob
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : dash-app-service'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
